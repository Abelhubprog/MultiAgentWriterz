"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+solana@0.3.9_bufferutil@4.0.9_utf-8-validate@5.0.10";
exports.ids = ["vendor-chunks/@turnkey+solana@0.3.9_bufferutil@4.0.9_utf-8-validate@5.0.10"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+solana@0.3.9_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@turnkey/solana/dist/index.mjs":
/*!*****************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+solana@0.3.9_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@turnkey/solana/dist/index.mjs ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeySigner: () => (/* binding */ TurnkeySigner)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/../../node_modules/.pnpm/@solana+web3.js@1.92.1_buff_edecb9fdb2114c3d9ce94ad7bcb385f1/node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/../../node_modules/.pnpm/@turnkey+http@2.12.2/node_modules/@turnkey/http/dist/index.mjs\");\n\n\n\nclass TurnkeySigner {\n    constructor(input) {\n        this.organizationId = input.organizationId;\n        this.client = input.client;\n    }\n    /**\n     * This function takes an array of Solana transactions and adds a signature with Turnkey to each of them\n     *\n     * @param txs array of Transaction | VersionedTransaction (native @solana/web3.js type)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async signAllTransactions(txs, fromAddress) {\n        const fromKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(fromAddress);\n        let messages = txs.map((tx) => this.getMessageToSign(tx).toString(\"hex\"));\n        const signRawPayloadsResult = await this.signRawPayloads(messages, fromAddress);\n        const signatures = signRawPayloadsResult.signRawPayloadsResult?.signatures?.map((sig) => `${sig?.r}${sig?.s}`);\n        for (let i in txs) {\n            txs[i]?.addSignature(fromKey, Buffer.from(signatures[i], \"hex\"));\n        }\n        return txs;\n    }\n    /**\n     * This function takes a Solana transaction and adds a signature with Turnkey\n     *\n     * @param tx Transaction | VersionedTransaction object (native @solana/web3.js type)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async addSignature(tx, fromAddress) {\n        const fromKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(fromAddress);\n        let messageToSign = this.getMessageToSign(tx);\n        const signRawPayloadResult = await this.signRawPayload(messageToSign.toString(\"hex\"), fromAddress);\n        const signature = `${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`;\n        tx.addSignature(fromKey, Buffer.from(signature, \"hex\"));\n    }\n    /**\n     * This function takes a message and returns it after being signed with Turnkey\n     *\n     * @param message The message to sign (Uint8Array)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async signMessage(message, fromAddress) {\n        const signRawPayloadResult = await this.signRawPayload(Buffer.from(message).toString(\"hex\"), fromAddress);\n        return Buffer.from(`${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`, \"hex\");\n    }\n    async signRawPayload(payload, signWith) {\n        const response = await this.client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: this.organizationId,\n            timestampMs: String(Date.now()),\n            parameters: {\n                signWith,\n                payload,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                // Note: unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032).\n                // Turnkey's signer requires an explicit value to be passed here to minimize ambiguity.\n                hashFunction: \"HASH_FUNCTION_NOT_APPLICABLE\",\n            },\n        });\n        const { id, status, type, result } = response.activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                message: `Expected COMPLETED status, got ${status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return result;\n    }\n    async signRawPayloads(payloads, signWith) {\n        const response = await this.client.signRawPayloads({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\",\n            organizationId: this.organizationId,\n            timestampMs: String(Date.now()),\n            parameters: {\n                signWith,\n                payloads,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                // Note: unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032).\n                // Turnkey's signer requires an explicit value to be passed here to minimize ambiguity.\n                hashFunction: \"HASH_FUNCTION_NOT_APPLICABLE\",\n            },\n        });\n        const { id, status, type, result } = response.activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                message: `Expected COMPLETED status, got ${status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return result;\n    }\n    getMessageToSign(tx) {\n        let messageToSign;\n        // @ts-ignore\n        // type narrowing (e.g. tx instanceof Transaction) does not seem to work here when the package gets compiled\n        // and bundled. Instead, we will check for the existence of a property unique to the Transaction class\n        // to determine whether the caller passed a Transaction or a VersionedTransaction\n        if (typeof tx.serializeMessage === \"function\") {\n            messageToSign = tx.serializeMessage();\n        }\n        else {\n            messageToSign = Buffer.from(tx.message.serialize());\n        }\n        return messageToSign;\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+solana@0.3.9_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@turnkey/solana/dist/index.mjs\n");

/***/ })

};
;