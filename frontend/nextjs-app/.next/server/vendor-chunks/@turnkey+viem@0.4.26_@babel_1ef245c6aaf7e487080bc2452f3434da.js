"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+viem@0.4.26_@babel_1ef245c6aaf7e487080bc2452f3434da";
exports.ids = ["vendor-chunks/@turnkey+viem@0.4.26_@babel_1ef245c6aaf7e487080bc2452f3434da"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel_1ef245c6aaf7e487080bc2452f3434da/node_modules/@turnkey/viem/dist/index.mjs":
/*!***************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel_1ef245c6aaf7e487080bc2452f3434da/node_modules/@turnkey/viem/dist/index.mjs ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: () => (/* binding */ createAccount),\n/* harmony export */   createApiKeyAccount: () => (/* binding */ createApiKeyAccount),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/utils/signature/signatureToHex.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/../../node_modules/.pnpm/viem@2.9.25_bufferutil@4.0._502b487f9eab0a009614007a60da5e24/node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/../../node_modules/.pnpm/@turnkey+http@2.12.2/node_modules/@turnkey/http/dist/index.mjs\");\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n\n\n\n\n\nasync function createAccount(input) {\n    const { client, organizationId, signWith } = input;\n    let { ethereumAddress } = input;\n    if (!signWith) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Missing signWith parameter`,\n        });\n    }\n    if ((0,viem__WEBPACK_IMPORTED_MODULE_2__.isAddress)(signWith)) {\n        // override provided `ethereumAddress`\n        ethereumAddress = signWith;\n    }\n    else if (!ethereumAddress) {\n        // we have a private key ID, but not an ethereumAddress\n        const data = await client.getPrivateKey({\n            privateKeyId: signWith,\n            organizationId: organizationId,\n        });\n        ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n        if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Unable to find Ethereum address for key ${signWith} under organization ${organizationId}`,\n            });\n        }\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, signWith);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, signWith);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, signWith);\n        },\n    });\n}\n/**\n * Creates a new Custom Account backed by a Turnkey API key.\n * @deprecated use {@link createAccount} instead.\n */\nasync function createApiKeyAccount(config) {\n    const { apiPublicKey, apiPrivateKey, baseUrl, organizationId, privateKeyId } = config;\n    const stamper = new _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper({\n        apiPublicKey: apiPublicKey,\n        apiPrivateKey: apiPrivateKey,\n    });\n    const client = new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient({\n        baseUrl: baseUrl,\n    }, stamper);\n    const data = await client.getPrivateKey({\n        privateKeyId: privateKeyId,\n        organizationId: organizationId,\n    });\n    const ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n    if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Unable to find Ethereum address for key ${privateKeyId} under organization ${organizationId}`,\n        });\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, privateKeyId);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, privateKeyId);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, privateKeyId);\n        },\n    });\n}\nasync function signMessage(client, message, organizationId, signWith) {\n    const hashedMessage = (0,viem__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(message);\n    const signedMessage = await signMessageWithErrorWrapping(client, hashedMessage, organizationId, signWith);\n    return `${signedMessage}`;\n}\nasync function signTransaction(client, transaction, serializer, organizationId, signWith) {\n    const serializedTx = serializer(transaction);\n    const nonHexPrefixedSerializedTx = serializedTx.replace(/^0x/, \"\");\n    return await signTransactionWithErrorWrapping(client, nonHexPrefixedSerializedTx, organizationId, signWith);\n}\nasync function signTypedData(client, data, organizationId, signWith) {\n    const hashToSign = (0,viem__WEBPACK_IMPORTED_MODULE_6__.hashTypedData)(data);\n    return await signMessageWithErrorWrapping(client, hashToSign, organizationId, signWith);\n}\nasync function signTransactionWithErrorWrapping(client, unsignedTransaction, organizationId, signWith) {\n    let signedTx;\n    try {\n        signedTx = await signTransactionImpl(client, unsignedTransaction, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign transaction: ${error.message}`,\n            cause: error,\n        });\n    }\n    return `0x${signedTx}`;\n}\nasync function signTransactionImpl(client, unsignedTransaction, organizationId, signWith) {\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signTransaction({\n            type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                type: \"TRANSACTION_TYPE_ETHEREUM\",\n                unsignedTransaction: unsignedTransaction,\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (activity.status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return assertNonNull(activity?.result?.signTransactionResult?.signedTransaction);\n    }\n    else {\n        // Want to get additional activity details here\n        const activity = await client.signTransaction({\n            signWith,\n            type: \"TRANSACTION_TYPE_ETHEREUM\",\n            unsignedTransaction: unsignedTransaction,\n        });\n        return assertNonNull(activity?.signedTransaction);\n    }\n}\nasync function signMessageWithErrorWrapping(client, message, organizationId, signWith) {\n    let signedMessage;\n    try {\n        signedMessage = await signMessageImpl(client, message, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign: ${error.message}`,\n            cause: error,\n        });\n    }\n    return signedMessage;\n}\nasync function signMessageImpl(client, message, organizationId, signWith) {\n    let result;\n    if (client instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient) {\n        const { activity } = await client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: organizationId,\n            parameters: {\n                signWith,\n                payload: message,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                hashFunction: \"HASH_FUNCTION_NO_OP\",\n            },\n            timestampMs: String(Date.now()), // millisecond timestamp\n        });\n        const { id, status, type } = activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Invalid activity status: ${activity.status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        result = assertNonNull(activity?.result?.signRawPayloadResult);\n    }\n    else {\n        // Want to get ID and status back as well in the result (we won't get an error)\n        // Maybe do a try/catch?\n        result = await client.signRawPayload({\n            signWith,\n            payload: message,\n            encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n            hashFunction: \"HASH_FUNCTION_NO_OP\",\n        });\n    }\n    let assembled = (0,viem__WEBPACK_IMPORTED_MODULE_7__.signatureToHex)({\n        r: `0x${result.r}`,\n        s: `0x${result.s}`,\n        v: result.v === \"00\" ? 27n : 28n,\n    });\n    // Assemble the hex\n    return assertNonNull(assembled);\n}\nfunction assertNonNull(input) {\n    if (input == null) {\n        throw new Error(`Got unexpected ${JSON.stringify(input)}`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K3ZpZW1AMC40LjI2X0BiYWJlbF8xZWYyNDVjNmFhZjdlNDg3MDgwYmMyNDUyZjM0MzRkYS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQW1HO0FBQ3pEO0FBQzBCO0FBQ1g7O0FBRXpEO0FBQ0EsWUFBWSxtQ0FBbUM7QUFDL0MsVUFBVSxrQkFBa0I7QUFDNUI7QUFDQSxrQkFBa0IsK0RBQW9CO0FBQ3RDO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUSwrQ0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxzQkFBc0IsK0RBQW9CO0FBQzFDLG9FQUFvRSxVQUFVLHFCQUFxQixlQUFlO0FBQ2xILGFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVyx3REFBUztBQUNwQjtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQW9CO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0EsWUFBWSxxRUFBcUU7QUFDakYsd0JBQXdCLG1FQUFhO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsdUJBQXVCLHdEQUFhO0FBQ3BDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFvQjtBQUN0QyxnRUFBZ0UsY0FBYyxxQkFBcUIsZUFBZTtBQUNsSCxTQUFTO0FBQ1Q7QUFDQSxXQUFXLHdEQUFTO0FBQ3BCO0FBQ0EsaUNBQWlDLFVBQVU7QUFDM0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGtCQUFrQixzREFBb0I7QUFDdEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0EsMEJBQTBCLGlEQUFXO0FBQ3JDO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1EQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsK0RBQW9CO0FBQ2pEO0FBQ0E7QUFDQSxrQkFBa0IsK0RBQW9CO0FBQ3RDLG9EQUFvRCxjQUFjO0FBQ2xFO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBLDBCQUEwQix3REFBYTtBQUN2QyxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBLHNCQUFzQiwrREFBb0I7QUFDMUMscURBQXFELGdCQUFnQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwrREFBb0I7QUFDakQ7QUFDQTtBQUNBLGtCQUFrQiwrREFBb0I7QUFDdEMsd0NBQXdDLGNBQWM7QUFDdEQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3REFBYTtBQUN2QyxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVCxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0Esc0JBQXNCLCtEQUFvQjtBQUMxQyxxREFBcUQsZ0JBQWdCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esb0JBQW9CLG9EQUFjO0FBQ2xDLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0JBQXNCO0FBQ2hFO0FBQ0E7QUFDQTs7QUFFMkY7QUFDM0YiLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrdmllbUAwLjQuMjZfQGJhYmVsXzFlZjI0NWM2YWFmN2U0ODcwODBiYzI0NTJmMzQzNGRhXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFx2aWVtXFxkaXN0XFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBZGRyZXNzLCBzZXJpYWxpemVUcmFuc2FjdGlvbiwgaGFzaE1lc3NhZ2UsIGhhc2hUeXBlZERhdGEsIHNpZ25hdHVyZVRvSGV4IH0gZnJvbSAndmllbSc7XG5pbXBvcnQgeyB0b0FjY291bnQgfSBmcm9tICd2aWVtL2FjY291bnRzJztcbmltcG9ydCB7IFR1cm5rZXlBY3Rpdml0eUVycm9yLCBUdXJua2V5Q2xpZW50IH0gZnJvbSAnQHR1cm5rZXkvaHR0cCc7XG5pbXBvcnQgeyBBcGlLZXlTdGFtcGVyIH0gZnJvbSAnQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyJztcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQWNjb3VudChpbnB1dCkge1xuICAgIGNvbnN0IHsgY2xpZW50LCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGggfSA9IGlucHV0O1xuICAgIGxldCB7IGV0aGVyZXVtQWRkcmVzcyB9ID0gaW5wdXQ7XG4gICAgaWYgKCFzaWduV2l0aCkge1xuICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogYE1pc3Npbmcgc2lnbldpdGggcGFyYW1ldGVyYCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0FkZHJlc3Moc2lnbldpdGgpKSB7XG4gICAgICAgIC8vIG92ZXJyaWRlIHByb3ZpZGVkIGBldGhlcmV1bUFkZHJlc3NgXG4gICAgICAgIGV0aGVyZXVtQWRkcmVzcyA9IHNpZ25XaXRoO1xuICAgIH1cbiAgICBlbHNlIGlmICghZXRoZXJldW1BZGRyZXNzKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSBwcml2YXRlIGtleSBJRCwgYnV0IG5vdCBhbiBldGhlcmV1bUFkZHJlc3NcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGNsaWVudC5nZXRQcml2YXRlS2V5KHtcbiAgICAgICAgICAgIHByaXZhdGVLZXlJZDogc2lnbldpdGgsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uSWQsXG4gICAgICAgIH0pO1xuICAgICAgICBldGhlcmV1bUFkZHJlc3MgPSBkYXRhLnByaXZhdGVLZXkuYWRkcmVzc2VzLmZpbmQoKGl0ZW0pID0+IGl0ZW0uZm9ybWF0ID09PSBcIkFERFJFU1NfRk9STUFUX0VUSEVSRVVNXCIpPy5hZGRyZXNzO1xuICAgICAgICBpZiAodHlwZW9mIGV0aGVyZXVtQWRkcmVzcyAhPT0gXCJzdHJpbmdcIiB8fCAhZXRoZXJldW1BZGRyZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmFibGUgdG8gZmluZCBFdGhlcmV1bSBhZGRyZXNzIGZvciBrZXkgJHtzaWduV2l0aH0gdW5kZXIgb3JnYW5pemF0aW9uICR7b3JnYW5pemF0aW9uSWR9YCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b0FjY291bnQoe1xuICAgICAgICBhZGRyZXNzOiBldGhlcmV1bUFkZHJlc3MsXG4gICAgICAgIHNpZ25NZXNzYWdlOiBmdW5jdGlvbiAoeyBtZXNzYWdlLCB9KSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbk1lc3NhZ2UoY2xpZW50LCBtZXNzYWdlLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpO1xuICAgICAgICB9LFxuICAgICAgICBzaWduVHJhbnNhY3Rpb246IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgYXJncykge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplciA9ICFhcmdzPy5zZXJpYWxpemVyXG4gICAgICAgICAgICAgICAgPyBzZXJpYWxpemVUcmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIDogYXJncy5zZXJpYWxpemVyO1xuICAgICAgICAgICAgcmV0dXJuIHNpZ25UcmFuc2FjdGlvbihjbGllbnQsIHRyYW5zYWN0aW9uLCBzZXJpYWxpemVyLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpO1xuICAgICAgICB9LFxuICAgICAgICBzaWduVHlwZWREYXRhOiBmdW5jdGlvbiAodHlwZWREYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnblR5cGVkRGF0YShjbGllbnQsIHR5cGVkRGF0YSwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBDdXN0b20gQWNjb3VudCBiYWNrZWQgYnkgYSBUdXJua2V5IEFQSSBrZXkuXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIGNyZWF0ZUFjY291bnR9IGluc3RlYWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFwaUtleUFjY291bnQoY29uZmlnKSB7XG4gICAgY29uc3QgeyBhcGlQdWJsaWNLZXksIGFwaVByaXZhdGVLZXksIGJhc2VVcmwsIG9yZ2FuaXphdGlvbklkLCBwcml2YXRlS2V5SWQgfSA9IGNvbmZpZztcbiAgICBjb25zdCBzdGFtcGVyID0gbmV3IEFwaUtleVN0YW1wZXIoe1xuICAgICAgICBhcGlQdWJsaWNLZXk6IGFwaVB1YmxpY0tleSxcbiAgICAgICAgYXBpUHJpdmF0ZUtleTogYXBpUHJpdmF0ZUtleSxcbiAgICB9KTtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgVHVybmtleUNsaWVudCh7XG4gICAgICAgIGJhc2VVcmw6IGJhc2VVcmwsXG4gICAgfSwgc3RhbXBlcik7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGNsaWVudC5nZXRQcml2YXRlS2V5KHtcbiAgICAgICAgcHJpdmF0ZUtleUlkOiBwcml2YXRlS2V5SWQsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb25JZCxcbiAgICB9KTtcbiAgICBjb25zdCBldGhlcmV1bUFkZHJlc3MgPSBkYXRhLnByaXZhdGVLZXkuYWRkcmVzc2VzLmZpbmQoKGl0ZW0pID0+IGl0ZW0uZm9ybWF0ID09PSBcIkFERFJFU1NfRk9STUFUX0VUSEVSRVVNXCIpPy5hZGRyZXNzO1xuICAgIGlmICh0eXBlb2YgZXRoZXJldW1BZGRyZXNzICE9PSBcInN0cmluZ1wiIHx8ICFldGhlcmV1bUFkZHJlc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmFibGUgdG8gZmluZCBFdGhlcmV1bSBhZGRyZXNzIGZvciBrZXkgJHtwcml2YXRlS2V5SWR9IHVuZGVyIG9yZ2FuaXphdGlvbiAke29yZ2FuaXphdGlvbklkfWAsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdG9BY2NvdW50KHtcbiAgICAgICAgYWRkcmVzczogZXRoZXJldW1BZGRyZXNzLFxuICAgICAgICBzaWduTWVzc2FnZTogZnVuY3Rpb24gKHsgbWVzc2FnZSwgfSkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ25NZXNzYWdlKGNsaWVudCwgbWVzc2FnZSwgb3JnYW5pemF0aW9uSWQsIHByaXZhdGVLZXlJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25UcmFuc2FjdGlvbjogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJpYWxpemVyID0gIWFyZ3M/LnNlcmlhbGl6ZXJcbiAgICAgICAgICAgICAgICA/IHNlcmlhbGl6ZVRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgOiBhcmdzLnNlcmlhbGl6ZXI7XG4gICAgICAgICAgICByZXR1cm4gc2lnblRyYW5zYWN0aW9uKGNsaWVudCwgdHJhbnNhY3Rpb24sIHNlcmlhbGl6ZXIsIG9yZ2FuaXphdGlvbklkLCBwcml2YXRlS2V5SWQpO1xuICAgICAgICB9LFxuICAgICAgICBzaWduVHlwZWREYXRhOiBmdW5jdGlvbiAodHlwZWREYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnblR5cGVkRGF0YShjbGllbnQsIHR5cGVkRGF0YSwgb3JnYW5pemF0aW9uSWQsIHByaXZhdGVLZXlJZCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZShjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGNvbnN0IGhhc2hlZE1lc3NhZ2UgPSBoYXNoTWVzc2FnZShtZXNzYWdlKTtcbiAgICBjb25zdCBzaWduZWRNZXNzYWdlID0gYXdhaXQgc2lnbk1lc3NhZ2VXaXRoRXJyb3JXcmFwcGluZyhjbGllbnQsIGhhc2hlZE1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgcmV0dXJuIGAke3NpZ25lZE1lc3NhZ2V9YDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25UcmFuc2FjdGlvbihjbGllbnQsIHRyYW5zYWN0aW9uLCBzZXJpYWxpemVyLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVHggPSBzZXJpYWxpemVyKHRyYW5zYWN0aW9uKTtcbiAgICBjb25zdCBub25IZXhQcmVmaXhlZFNlcmlhbGl6ZWRUeCA9IHNlcmlhbGl6ZWRUeC5yZXBsYWNlKC9eMHgvLCBcIlwiKTtcbiAgICByZXR1cm4gYXdhaXQgc2lnblRyYW5zYWN0aW9uV2l0aEVycm9yV3JhcHBpbmcoY2xpZW50LCBub25IZXhQcmVmaXhlZFNlcmlhbGl6ZWRUeCwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25UeXBlZERhdGEoY2xpZW50LCBkYXRhLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpIHtcbiAgICBjb25zdCBoYXNoVG9TaWduID0gaGFzaFR5cGVkRGF0YShkYXRhKTtcbiAgICByZXR1cm4gYXdhaXQgc2lnbk1lc3NhZ2VXaXRoRXJyb3JXcmFwcGluZyhjbGllbnQsIGhhc2hUb1NpZ24sIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduVHJhbnNhY3Rpb25XaXRoRXJyb3JXcmFwcGluZyhjbGllbnQsIHVuc2lnbmVkVHJhbnNhY3Rpb24sIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGxldCBzaWduZWRUeDtcbiAgICB0cnkge1xuICAgICAgICBzaWduZWRUeCA9IGF3YWl0IHNpZ25UcmFuc2FjdGlvbkltcGwoY2xpZW50LCB1bnNpZ25lZFRyYW5zYWN0aW9uLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVHVybmtleUFjdGl2aXR5RXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIHNpZ24gdHJhbnNhY3Rpb246ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICAgICAgY2F1c2U6IGVycm9yLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGAweCR7c2lnbmVkVHh9YDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25UcmFuc2FjdGlvbkltcGwoY2xpZW50LCB1bnNpZ25lZFRyYW5zYWN0aW9uLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpIHtcbiAgICBpZiAoY2xpZW50IGluc3RhbmNlb2YgVHVybmtleUNsaWVudCkge1xuICAgICAgICBjb25zdCB7IGFjdGl2aXR5IH0gPSBhd2FpdCBjbGllbnQuc2lnblRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6IFwiQUNUSVZJVFlfVFlQRV9TSUdOX1RSQU5TQUNUSU9OX1YyXCIsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgICAgc2lnbldpdGgsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJUUkFOU0FDVElPTl9UWVBFX0VUSEVSRVVNXCIsXG4gICAgICAgICAgICAgICAgdW5zaWduZWRUcmFuc2FjdGlvbjogdW5zaWduZWRUcmFuc2FjdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1lc3RhbXBNczogU3RyaW5nKERhdGUubm93KCkpLCAvLyBtaWxsaXNlY29uZCB0aW1lc3RhbXBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgaWQsIHN0YXR1cywgdHlwZSB9ID0gYWN0aXZpdHk7XG4gICAgICAgIGlmIChhY3Rpdml0eS5zdGF0dXMgIT09IFwiQUNUSVZJVFlfU1RBVFVTX0NPTVBMRVRFRFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIGFjdGl2aXR5IHN0YXR1czogJHthY3Rpdml0eS5zdGF0dXN9YCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBpZCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc3NlcnROb25OdWxsKGFjdGl2aXR5Py5yZXN1bHQ/LnNpZ25UcmFuc2FjdGlvblJlc3VsdD8uc2lnbmVkVHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gV2FudCB0byBnZXQgYWRkaXRpb25hbCBhY3Rpdml0eSBkZXRhaWxzIGhlcmVcbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBhd2FpdCBjbGllbnQuc2lnblRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIHNpZ25XaXRoLFxuICAgICAgICAgICAgdHlwZTogXCJUUkFOU0FDVElPTl9UWVBFX0VUSEVSRVVNXCIsXG4gICAgICAgICAgICB1bnNpZ25lZFRyYW5zYWN0aW9uOiB1bnNpZ25lZFRyYW5zYWN0aW9uLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFzc2VydE5vbk51bGwoYWN0aXZpdHk/LnNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZVdpdGhFcnJvcldyYXBwaW5nKGNsaWVudCwgbWVzc2FnZSwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKSB7XG4gICAgbGV0IHNpZ25lZE1lc3NhZ2U7XG4gICAgdHJ5IHtcbiAgICAgICAgc2lnbmVkTWVzc2FnZSA9IGF3YWl0IHNpZ25NZXNzYWdlSW1wbChjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUdXJua2V5QWN0aXZpdHlFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gc2lnbjogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmVkTWVzc2FnZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlSW1wbChjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGNsaWVudCBpbnN0YW5jZW9mIFR1cm5rZXlDbGllbnQpIHtcbiAgICAgICAgY29uc3QgeyBhY3Rpdml0eSB9ID0gYXdhaXQgY2xpZW50LnNpZ25SYXdQYXlsb2FkKHtcbiAgICAgICAgICAgIHR5cGU6IFwiQUNUSVZJVFlfVFlQRV9TSUdOX1JBV19QQVlMT0FEX1YyXCIsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgICAgc2lnbldpdGgsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJQQVlMT0FEX0VOQ09ESU5HX0hFWEFERUNJTUFMXCIsXG4gICAgICAgICAgICAgICAgaGFzaEZ1bmN0aW9uOiBcIkhBU0hfRlVOQ1RJT05fTk9fT1BcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1lc3RhbXBNczogU3RyaW5nKERhdGUubm93KCkpLCAvLyBtaWxsaXNlY29uZCB0aW1lc3RhbXBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgaWQsIHN0YXR1cywgdHlwZSB9ID0gYWN0aXZpdHk7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IFwiQUNUSVZJVFlfU1RBVFVTX0NPTVBMRVRFRFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIGFjdGl2aXR5IHN0YXR1czogJHthY3Rpdml0eS5zdGF0dXN9YCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBpZCxcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGFzc2VydE5vbk51bGwoYWN0aXZpdHk/LnJlc3VsdD8uc2lnblJhd1BheWxvYWRSZXN1bHQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gV2FudCB0byBnZXQgSUQgYW5kIHN0YXR1cyBiYWNrIGFzIHdlbGwgaW4gdGhlIHJlc3VsdCAod2Ugd29uJ3QgZ2V0IGFuIGVycm9yKVxuICAgICAgICAvLyBNYXliZSBkbyBhIHRyeS9jYXRjaD9cbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgY2xpZW50LnNpZ25SYXdQYXlsb2FkKHtcbiAgICAgICAgICAgIHNpZ25XaXRoLFxuICAgICAgICAgICAgcGF5bG9hZDogbWVzc2FnZSxcbiAgICAgICAgICAgIGVuY29kaW5nOiBcIlBBWUxPQURfRU5DT0RJTkdfSEVYQURFQ0lNQUxcIixcbiAgICAgICAgICAgIGhhc2hGdW5jdGlvbjogXCJIQVNIX0ZVTkNUSU9OX05PX09QXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgYXNzZW1ibGVkID0gc2lnbmF0dXJlVG9IZXgoe1xuICAgICAgICByOiBgMHgke3Jlc3VsdC5yfWAsXG4gICAgICAgIHM6IGAweCR7cmVzdWx0LnN9YCxcbiAgICAgICAgdjogcmVzdWx0LnYgPT09IFwiMDBcIiA/IDI3biA6IDI4bixcbiAgICB9KTtcbiAgICAvLyBBc3NlbWJsZSB0aGUgaGV4XG4gICAgcmV0dXJuIGFzc2VydE5vbk51bGwoYXNzZW1ibGVkKTtcbn1cbmZ1bmN0aW9uIGFzc2VydE5vbk51bGwoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoaW5wdXQpfWApO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjY291bnQsIGNyZWF0ZUFwaUtleUFjY291bnQsIHNpZ25NZXNzYWdlLCBzaWduVHJhbnNhY3Rpb24sIHNpZ25UeXBlZERhdGEgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+viem@0.4.26_@babel_1ef245c6aaf7e487080bc2452f3434da/node_modules/@turnkey/viem/dist/index.mjs\n");

/***/ })

};
;