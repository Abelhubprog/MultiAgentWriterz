"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solana+codecs-data-structures@2.0.0-preview.2";
exports.ids = ["vendor-chunks/@solana+codecs-data-structures@2.0.0-preview.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-preview.2/node_modules/@solana/codecs-data-structures/dist/index.node.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-preview.2/node_modules/@solana/codecs-data-structures/dist/index.node.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertValidNumberOfItemsForCodec: () => (/* binding */ assertValidNumberOfItemsForCodec),\n/* harmony export */   getArrayCodec: () => (/* binding */ getArrayCodec),\n/* harmony export */   getArrayDecoder: () => (/* binding */ getArrayDecoder),\n/* harmony export */   getArrayEncoder: () => (/* binding */ getArrayEncoder),\n/* harmony export */   getBitArrayCodec: () => (/* binding */ getBitArrayCodec),\n/* harmony export */   getBitArrayDecoder: () => (/* binding */ getBitArrayDecoder),\n/* harmony export */   getBitArrayEncoder: () => (/* binding */ getBitArrayEncoder),\n/* harmony export */   getBooleanCodec: () => (/* binding */ getBooleanCodec),\n/* harmony export */   getBooleanDecoder: () => (/* binding */ getBooleanDecoder),\n/* harmony export */   getBooleanEncoder: () => (/* binding */ getBooleanEncoder),\n/* harmony export */   getBytesCodec: () => (/* binding */ getBytesCodec),\n/* harmony export */   getBytesDecoder: () => (/* binding */ getBytesDecoder),\n/* harmony export */   getBytesEncoder: () => (/* binding */ getBytesEncoder),\n/* harmony export */   getDataEnumCodec: () => (/* binding */ getDataEnumCodec),\n/* harmony export */   getDataEnumDecoder: () => (/* binding */ getDataEnumDecoder),\n/* harmony export */   getDataEnumEncoder: () => (/* binding */ getDataEnumEncoder),\n/* harmony export */   getMapCodec: () => (/* binding */ getMapCodec),\n/* harmony export */   getMapDecoder: () => (/* binding */ getMapDecoder),\n/* harmony export */   getMapEncoder: () => (/* binding */ getMapEncoder),\n/* harmony export */   getNullableCodec: () => (/* binding */ getNullableCodec),\n/* harmony export */   getNullableDecoder: () => (/* binding */ getNullableDecoder),\n/* harmony export */   getNullableEncoder: () => (/* binding */ getNullableEncoder),\n/* harmony export */   getScalarEnumCodec: () => (/* binding */ getScalarEnumCodec),\n/* harmony export */   getScalarEnumDecoder: () => (/* binding */ getScalarEnumDecoder),\n/* harmony export */   getScalarEnumEncoder: () => (/* binding */ getScalarEnumEncoder),\n/* harmony export */   getSetCodec: () => (/* binding */ getSetCodec),\n/* harmony export */   getSetDecoder: () => (/* binding */ getSetDecoder),\n/* harmony export */   getSetEncoder: () => (/* binding */ getSetEncoder),\n/* harmony export */   getStructCodec: () => (/* binding */ getStructCodec),\n/* harmony export */   getStructDecoder: () => (/* binding */ getStructDecoder),\n/* harmony export */   getStructEncoder: () => (/* binding */ getStructEncoder),\n/* harmony export */   getTupleCodec: () => (/* binding */ getTupleCodec),\n/* harmony export */   getTupleDecoder: () => (/* binding */ getTupleDecoder),\n/* harmony export */   getTupleEncoder: () => (/* binding */ getTupleEncoder),\n/* harmony export */   getUnitCodec: () => (/* binding */ getUnitCodec),\n/* harmony export */   getUnitDecoder: () => (/* binding */ getUnitDecoder),\n/* harmony export */   getUnitEncoder: () => (/* binding */ getUnitEncoder)\n/* harmony export */ });\n/* harmony import */ var _solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/codecs-core */ \"(ssr)/../../node_modules/.pnpm/@solana+codecs-core@2.0.0-preview.2/node_modules/@solana/codecs-core/dist/index.node.js\");\n/* harmony import */ var _solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/codecs-numbers */ \"(ssr)/../../node_modules/.pnpm/@solana+codecs-numbers@2.0.0-preview.2/node_modules/@solana/codecs-numbers/dist/index.node.js\");\n/* harmony import */ var _solana_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/errors */ \"(ssr)/../../node_modules/.pnpm/@solana+errors@2.0.0-preview.2/node_modules/@solana/errors/dist/index.node.js\");\n\n\n\n\n// src/array.ts\nfunction assertValidNumberOfItemsForCodec(codecDescription, expected, actual) {\n  if (expected !== actual) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_NUMBER_OF_ITEMS, {\n      actual,\n      codecDescription,\n      expected\n    });\n  }\n}\nfunction maxCodecSizes(sizes) {\n  return sizes.reduce(\n    (all, size) => all === null || size === null ? null : Math.max(all, size),\n    0\n  );\n}\nfunction sumCodecSizes(sizes) {\n  return sizes.reduce((all, size) => all === null || size === null ? null : all + size, 0);\n}\nfunction getFixedSize(codec) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : null;\n}\nfunction getMaxSize(codec) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(codec) ? codec.fixedSize : codec.maxSize ?? null;\n}\n\n// src/array.ts\nfunction getArrayEncoder(item, config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Encoder)();\n  const fixedSize = computeArrayLikeCodecSize(size, getFixedSize(item));\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (array) => {\n        const prefixSize = typeof size === \"object\" ? (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(array.length, size) : 0;\n        return prefixSize + [...array].reduce((all, value) => all + (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value, item), 0);\n      },\n      maxSize\n    },\n    write: (array, bytes, offset) => {\n      if (typeof size === \"number\") {\n        assertValidNumberOfItemsForCodec(\"array\", size, array.length);\n      }\n      if (typeof size === \"object\") {\n        offset = size.write(array.length, bytes, offset);\n      }\n      array.forEach((value) => {\n        offset = item.write(value, bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getArrayDecoder(item, config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU32Decoder)();\n  const itemSize = getFixedSize(item);\n  const fixedSize = computeArrayLikeCodecSize(size, itemSize);\n  const maxSize = computeArrayLikeCodecSize(size, getMaxSize(item)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize !== null ? { fixedSize } : { maxSize },\n    read: (bytes, offset) => {\n      const array = [];\n      if (typeof size === \"object\" && bytes.slice(offset).length === 0) {\n        return [array, offset];\n      }\n      if (size === \"remainder\") {\n        while (offset < bytes.length) {\n          const [value, newOffset2] = item.read(bytes, offset);\n          offset = newOffset2;\n          array.push(value);\n        }\n        return [array, offset];\n      }\n      const [resolvedSize, newOffset] = typeof size === \"number\" ? [size, offset] : size.read(bytes, offset);\n      offset = newOffset;\n      for (let i = 0; i < resolvedSize; i += 1) {\n        const [value, newOffset2] = item.read(bytes, offset);\n        offset = newOffset2;\n        array.push(value);\n      }\n      return [array, offset];\n    }\n  });\n}\nfunction getArrayCodec(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getArrayEncoder(item, config), getArrayDecoder(item, config));\n}\nfunction computeArrayLikeCodecSize(size, itemSize) {\n  if (typeof size !== \"number\")\n    return null;\n  if (size === 0)\n    return 0;\n  return itemSize === null ? null : itemSize * size;\n}\nfunction getBitArrayEncoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    fixedSize: size,\n    write(value, bytes, offset) {\n      const bytesToAdd = [];\n      for (let i = 0; i < size; i += 1) {\n        let byte = 0;\n        for (let j = 0; j < 8; j += 1) {\n          const feature = Number(value[i * 8 + j] ?? 0);\n          byte |= feature << (backward ? j : 7 - j);\n        }\n        if (backward) {\n          bytesToAdd.unshift(byte);\n        } else {\n          bytesToAdd.push(byte);\n        }\n      }\n      bytes.set(bytesToAdd, offset);\n      return size;\n    }\n  });\n}\nfunction getBitArrayDecoder(size, config = {}) {\n  const parsedConfig = typeof config === \"boolean\" ? { backward: config } : config;\n  const backward = parsedConfig.backward ?? false;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    fixedSize: size,\n    read(bytes, offset) {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayHasEnoughBytesForCodec)(\"bitArray\", size, bytes, offset);\n      const booleans = [];\n      let slice = bytes.slice(offset, offset + size);\n      slice = backward ? slice.reverse() : slice;\n      slice.forEach((byte) => {\n        for (let i = 0; i < 8; i += 1) {\n          if (backward) {\n            booleans.push(Boolean(byte & 1));\n            byte >>= 1;\n          } else {\n            booleans.push(Boolean(byte & 128));\n            byte <<= 1;\n          }\n        }\n      });\n      return [booleans, offset + size];\n    }\n  });\n}\nfunction getBitArrayCodec(size, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBitArrayEncoder(size, config), getBitArrayDecoder(size, config));\n}\nfunction getBooleanEncoder(config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(size);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapEncoder)(size, (value) => value ? 1 : 0);\n}\nfunction getBooleanDecoder(config = {}) {\n  const size = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(size);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapDecoder)(size, (value) => Number(value) === 1);\n}\nfunction getBooleanCodec(config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBooleanEncoder(config), getBooleanDecoder(config));\n}\nfunction getBytesEncoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteEncoder = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    getSizeFromValue: (value) => value.length,\n    write: (value, bytes, offset) => {\n      bytes.set(value, offset);\n      return offset + value.length;\n    }\n  });\n  if (size === \"variable\") {\n    return byteEncoder;\n  }\n  if (typeof size === \"number\") {\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixEncoder)(byteEncoder, size);\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    getSizeFromValue: (value) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value.length, size) + value.length,\n    write: (value, bytes, offset) => {\n      offset = size.write(value.length, bytes, offset);\n      return byteEncoder.write(value, bytes, offset);\n    }\n  });\n}\nfunction getBytesDecoder(config = {}) {\n  const size = config.size ?? \"variable\";\n  const byteDecoder = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    read: (bytes, offset) => {\n      const slice = bytes.slice(offset);\n      return [slice, offset + slice.length];\n    }\n  });\n  if (size === \"variable\") {\n    return byteDecoder;\n  }\n  if (typeof size === \"number\") {\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.fixDecoder)(byteDecoder, size);\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    read: (bytes, offset) => {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayIsNotEmptyForCodec)(\"bytes\", bytes, offset);\n      const [lengthBigInt, lengthOffset] = size.read(bytes, offset);\n      const length = Number(lengthBigInt);\n      offset = lengthOffset;\n      const contentBytes = bytes.slice(offset, offset + length);\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayHasEnoughBytesForCodec)(\"bytes\", length, contentBytes);\n      const [value, contentOffset] = byteDecoder.read(contentBytes, 0);\n      offset += contentOffset;\n      return [value, offset];\n    }\n  });\n}\nfunction getBytesCodec(config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getBytesEncoder(config), getBytesDecoder(config));\n}\nfunction getDataEnumEncoder(variants, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize !== null ? { fixedSize } : {\n      getSizeFromValue: (variant) => {\n        const discriminator = getVariantDiscriminator(variants, variant);\n        const variantEncoder = variants[discriminator][1];\n        return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(discriminator, prefix) + (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(variant, variantEncoder);\n      },\n      maxSize: getDataEnumMaxSize(variants, prefix)\n    },\n    write: (variant, bytes, offset) => {\n      const discriminator = getVariantDiscriminator(variants, variant);\n      offset = prefix.write(discriminator, bytes, offset);\n      const variantEncoder = variants[discriminator][1];\n      return variantEncoder.write(variant, bytes, offset);\n    }\n  });\n}\nfunction getDataEnumDecoder(variants, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  const fixedSize = getDataEnumFixedSize(variants, prefix);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize !== null ? { fixedSize } : { maxSize: getDataEnumMaxSize(variants, prefix) },\n    read: (bytes, offset) => {\n      (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertByteArrayIsNotEmptyForCodec)(\"dataEnum\", bytes, offset);\n      const [discriminator, dOffset] = prefix.read(bytes, offset);\n      offset = dOffset;\n      const variantField = variants[Number(discriminator)] ?? null;\n      if (!variantField) {\n        throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n          discriminator,\n          maxRange: variants.length - 1,\n          minRange: 0\n        });\n      }\n      const [variant, vOffset] = variantField[1].read(bytes, offset);\n      offset = vOffset;\n      return [{ __kind: variantField[0], ...variant ?? {} }, offset];\n    }\n  });\n}\nfunction getDataEnumCodec(variants, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getDataEnumEncoder(variants, config),\n    getDataEnumDecoder(variants, config)\n  );\n}\nfunction getDataEnumFixedSize(variants, prefix) {\n  if (variants.length === 0)\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(prefix) ? prefix.fixedSize : null;\n  if (!(0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variants[0][1]))\n    return null;\n  const variantSize = variants[0][1].fixedSize;\n  const sameSizedVariants = variants.every(\n    (variant) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(variant[1]) && variant[1].fixedSize === variantSize\n  );\n  if (!sameSizedVariants)\n    return null;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(prefix) ? prefix.fixedSize + variantSize : null;\n}\nfunction getDataEnumMaxSize(variants, prefix) {\n  const maxVariantSize = maxCodecSizes(variants.map(([, codec]) => getMaxSize(codec)));\n  return sumCodecSizes([getMaxSize(prefix), maxVariantSize]) ?? void 0;\n}\nfunction getVariantDiscriminator(variants, variant) {\n  const discriminator = variants.findIndex(([key]) => variant.__kind === key);\n  if (discriminator < 0) {\n    throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_DATA_ENUM_VARIANT, {\n      value: variant.__kind,\n      variants: variants.map(([key]) => key)\n    });\n  }\n  return discriminator;\n}\nfunction getTupleEncoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => items.map((item, index) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[index], item)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (value, bytes, offset) => {\n      assertValidNumberOfItemsForCodec(\"tuple\", items.length, value.length);\n      items.forEach((item, index) => {\n        offset = item.write(value[index], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getTupleDecoder(items) {\n  const fixedSize = sumCodecSizes(items.map(getFixedSize));\n  const maxSize = sumCodecSizes(items.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const values = [];\n      items.forEach((item) => {\n        const [newValue, newOffset] = item.read(bytes, offset);\n        values.push(newValue);\n        offset = newOffset;\n      });\n      return [values, offset];\n    }\n  });\n}\nfunction getTupleCodec(items) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getTupleEncoder(items),\n    getTupleDecoder(items)\n  );\n}\n\n// src/map.ts\nfunction getMapEncoder(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapEncoder)(\n    getArrayEncoder(getTupleEncoder([key, value]), config),\n    (map) => [...map.entries()]\n  );\n}\nfunction getMapDecoder(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapDecoder)(\n    getArrayDecoder(getTupleDecoder([key, value]), config),\n    (entries) => new Map(entries)\n  );\n}\nfunction getMapCodec(key, value, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getMapEncoder(key, value, config), getMapDecoder(key, value, config));\n}\nfunction getNullableEncoder(item, config = {}) {\n  const prefix = config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  const fixed = config.fixed ?? false;\n  const isZeroSizeItem = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(item) && (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);\n    (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(prefix);\n    const fixedSize = prefix.fixedSize + item.fixedSize;\n    return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n      fixedSize,\n      write: (option, bytes, offset) => {\n        const prefixOffset = prefix.write(Number(option !== null), bytes, offset);\n        if (option !== null) {\n          item.write(option, bytes, prefixOffset);\n        }\n        return offset + fixedSize;\n      }\n    });\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    getSizeFromValue: (option) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(Number(option !== null), prefix) + (option !== null ? (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(option, item) : 0),\n    maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0,\n    write: (option, bytes, offset) => {\n      offset = prefix.write(Number(option !== null), bytes, offset);\n      if (option !== null) {\n        offset = item.write(option, bytes, offset);\n      }\n      return offset;\n    }\n  });\n}\nfunction getNullableDecoder(item, config = {}) {\n  const prefix = config.prefix ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  const fixed = config.fixed ?? false;\n  let fixedSize = null;\n  const isZeroSizeItem = (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(item) && (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.isFixedSize)(prefix) && item.fixedSize === 0;\n  if (fixed || isZeroSizeItem) {\n    (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(item);\n    (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.assertIsFixedSize)(prefix);\n    fixedSize = prefix.fixedSize + item.fixedSize;\n  }\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize === null ? { maxSize: sumCodecSizes([prefix, item].map(getMaxSize)) ?? void 0 } : { fixedSize },\n    read: (bytes, offset) => {\n      if (bytes.length - offset <= 0) {\n        return [null, offset];\n      }\n      const [isSome, prefixOffset] = prefix.read(bytes, offset);\n      if (isSome === 0) {\n        return [null, fixedSize !== null ? offset + fixedSize : prefixOffset];\n      }\n      const [value, newOffset] = item.read(bytes, prefixOffset);\n      return [value, fixedSize !== null ? offset + fixedSize : newOffset];\n    }\n  });\n}\nfunction getNullableCodec(item, config = {}) {\n  const configCast = config;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getNullableEncoder(item, configCast), getNullableDecoder(item, configCast));\n}\nfunction getScalarEnumEncoder(constructor, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Encoder)();\n  const { minRange, maxRange, allStringInputs, enumKeys, enumValues } = getScalarEnumStats(constructor);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapEncoder)(prefix, (value) => {\n    const isInvalidNumber = typeof value === \"number\" && (value < minRange || value > maxRange);\n    const isInvalidString = typeof value === \"string\" && !allStringInputs.includes(value);\n    if (isInvalidNumber || isInvalidString) {\n      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__INVALID_SCALAR_ENUM_VARIANT, {\n        maxRange,\n        minRange,\n        value,\n        variants: allStringInputs\n      });\n    }\n    if (typeof value === \"number\")\n      return value;\n    const valueIndex = enumValues.indexOf(value);\n    if (valueIndex >= 0)\n      return valueIndex;\n    return enumKeys.indexOf(value);\n  });\n}\nfunction getScalarEnumDecoder(constructor, config = {}) {\n  const prefix = config.size ?? (0,_solana_codecs_numbers__WEBPACK_IMPORTED_MODULE_2__.getU8Decoder)();\n  const { minRange, maxRange, enumKeys } = getScalarEnumStats(constructor);\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapDecoder)(prefix, (value) => {\n    const valueAsNumber = Number(value);\n    if (valueAsNumber < minRange || valueAsNumber > maxRange) {\n      throw new _solana_errors__WEBPACK_IMPORTED_MODULE_0__.SolanaError(_solana_errors__WEBPACK_IMPORTED_MODULE_0__.SOLANA_ERROR__CODECS__ENUM_DISCRIMINATOR_OUT_OF_RANGE, {\n        discriminator: valueAsNumber,\n        maxRange,\n        minRange\n      });\n    }\n    return constructor[enumKeys[valueAsNumber]];\n  });\n}\nfunction getScalarEnumCodec(constructor, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getScalarEnumEncoder(constructor, config), getScalarEnumDecoder(constructor, config));\n}\nfunction getScalarEnumStats(constructor) {\n  const numericValues = Object.values(constructor).filter((v) => typeof v === \"number\");\n  const deduplicatedConstructor = Object.fromEntries(\n    Object.entries(constructor).slice(numericValues.length)\n  );\n  const enumKeys = Object.keys(deduplicatedConstructor);\n  const enumValues = Object.values(deduplicatedConstructor);\n  const minRange = 0;\n  const maxRange = enumValues.length - 1;\n  const allStringInputs = [\n    .../* @__PURE__ */ new Set([...enumKeys, ...enumValues.filter((v) => typeof v === \"string\")])\n  ];\n  return {\n    allStringInputs,\n    enumKeys,\n    enumValues,\n    maxRange,\n    minRange\n  };\n}\nfunction getSetEncoder(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapEncoder)(getArrayEncoder(item, config), (set) => [...set]);\n}\nfunction getSetDecoder(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.mapDecoder)(getArrayDecoder(item, config), (entries) => new Set(entries));\n}\nfunction getSetCodec(item, config = {}) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getSetEncoder(item, config), getSetDecoder(item, config));\n}\nfunction getStructEncoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    ...fixedSize === null ? {\n      getSizeFromValue: (value) => fields.map(([key, codec]) => (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.getEncodedSize)(value[key], codec)).reduce((all, one) => all + one, 0),\n      maxSize\n    } : { fixedSize },\n    write: (struct, bytes, offset) => {\n      fields.forEach(([key, codec]) => {\n        offset = codec.write(struct[key], bytes, offset);\n      });\n      return offset;\n    }\n  });\n}\nfunction getStructDecoder(fields) {\n  const fieldCodecs = fields.map(([, codec]) => codec);\n  const fixedSize = sumCodecSizes(fieldCodecs.map(getFixedSize));\n  const maxSize = sumCodecSizes(fieldCodecs.map(getMaxSize)) ?? void 0;\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    ...fixedSize === null ? { maxSize } : { fixedSize },\n    read: (bytes, offset) => {\n      const struct = {};\n      fields.forEach(([key, codec]) => {\n        const [value, newOffset] = codec.read(bytes, offset);\n        offset = newOffset;\n        struct[key] = value;\n      });\n      return [struct, offset];\n    }\n  });\n}\nfunction getStructCodec(fields) {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(\n    getStructEncoder(fields),\n    getStructDecoder(fields)\n  );\n}\nfunction getUnitEncoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createEncoder)({\n    fixedSize: 0,\n    write: (_value, _bytes, offset) => offset\n  });\n}\nfunction getUnitDecoder() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.createDecoder)({\n    fixedSize: 0,\n    read: (_bytes, offset) => [void 0, offset]\n  });\n}\nfunction getUnitCodec() {\n  return (0,_solana_codecs_core__WEBPACK_IMPORTED_MODULE_1__.combineCodec)(getUnitEncoder(), getUnitDecoder());\n}\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@solana+codecs-data-structures@2.0.0-preview.2/node_modules/@solana/codecs-data-structures/dist/index.node.js\n");

/***/ })

};
;