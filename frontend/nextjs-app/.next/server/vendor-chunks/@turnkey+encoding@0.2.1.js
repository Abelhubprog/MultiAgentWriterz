"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+encoding@0.2.1";
exports.ids = ["vendor-chunks/@turnkey+encoding@0.2.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction hexStringToBase64url(input, length) {\n    // Add an extra 0 to the start of the string to get a valid hex string (even length)\n    // (e.g. 0x0123 instead of 0x123)\n    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, \"0\");\n    const buffer = uint8ArrayFromHexString(hexString, length);\n    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\nconst uint8ArrayFromHexString = (hexString, length) => {\n    const hexRegex = /^[0-9A-Fa-f]+$/;\n    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {\n        throw new Error(`cannot create uint8array from invalid hex string: \"${hexString}\"`);\n    }\n    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));\n    if (!length) {\n        return buffer;\n    }\n    if (hexString.length / 2 > length) {\n        throw new Error(\"hex value cannot fit in a buffer of \" + length + \" byte(s)\");\n    }\n    // If a length is specified, ensure we sufficiently pad\n    let paddedBuffer = new Uint8Array(length);\n    paddedBuffer.set(buffer, length - buffer.length);\n    return paddedBuffer;\n};\n// Pure JS implementation of btoa. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2VuY29kaW5nQDAuMi4xL25vZGVfbW9kdWxlcy9AdHVybmtleS9lbmNvZGluZy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxVQUFVO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBLHdGQUF3RixpQkFBaUIsY0FBYyxFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0s7QUFDL0siLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrZW5jb2RpbmdAMC4yLjFcXG5vZGVfbW9kdWxlc1xcQHR1cm5rZXlcXGVuY29kaW5nXFxkaXN0XFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi93ZWJhdXRobi1qc29uL2Jsb2IvZTkzMmIzNTg1ZmE3MGIwYmQ1YjVhNDAxMmJhN2RiYWQ3YjBhMGQwZi9zcmMvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwudHMjTDIzXG4gKi9cbmNvbnN0IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCA9IDMyO1xuZnVuY3Rpb24gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoaW5wdXQpIHtcbiAgICAvLyBzdHJpbmcgdG8gYmFzZTY0IC0tIHdlIGRvIG5vdCByZWx5IG9uIHRoZSBicm93c2VyJ3MgYnRvYSBzaW5jZSBpdCdzIG5vdCBwcmVzZW50IGluIFJlYWN0IE5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKGlucHV0KTtcbiAgICByZXR1cm4gYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nKGJhc2U2NFN0cmluZyk7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmdUb0Jhc2U2NHVybChpbnB1dCwgbGVuZ3RoKSB7XG4gICAgLy8gQWRkIGFuIGV4dHJhIDAgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmcgdG8gZ2V0IGEgdmFsaWQgaGV4IHN0cmluZyAoZXZlbiBsZW5ndGgpXG4gICAgLy8gKGUuZy4gMHgwMTIzIGluc3RlYWQgb2YgMHgxMjMpXG4gICAgY29uc3QgaGV4U3RyaW5nID0gaW5wdXQucGFkU3RhcnQoTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAvIDIpICogMiwgXCIwXCIpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nKGhleFN0cmluZywgbGVuZ3RoKTtcbiAgICByZXR1cm4gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoYnVmZmVyLnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpLCBcIlwiKSk7XG59XG5mdW5jdGlvbiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpLnJlcGxhY2UoLz0vZywgXCJcIik7XG59XG5mdW5jdGlvbiB1aW50OEFycmF5VG9IZXhTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIHgudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgXCJcIik7XG59XG5jb25zdCB1aW50OEFycmF5RnJvbUhleFN0cmluZyA9IChoZXhTdHJpbmcsIGxlbmd0aCkgPT4ge1xuICAgIGNvbnN0IGhleFJlZ2V4ID0gL15bMC05QS1GYS1mXSskLztcbiAgICBpZiAoIWhleFN0cmluZyB8fCBoZXhTdHJpbmcubGVuZ3RoICUgMiAhPSAwIHx8ICFoZXhSZWdleC50ZXN0KGhleFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgY3JlYXRlIHVpbnQ4YXJyYXkgZnJvbSBpbnZhbGlkIGhleCBzdHJpbmc6IFwiJHtoZXhTdHJpbmd9XCJgKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGV4U3RyaW5nLm1hdGNoKC8uLi9nKS5tYXAoKGgpID0+IHBhcnNlSW50KGgsIDE2KSkpO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIGlmIChoZXhTdHJpbmcubGVuZ3RoIC8gMiA+IGxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggdmFsdWUgY2Fubm90IGZpdCBpbiBhIGJ1ZmZlciBvZiBcIiArIGxlbmd0aCArIFwiIGJ5dGUocylcIik7XG4gICAgfVxuICAgIC8vIElmIGEgbGVuZ3RoIGlzIHNwZWNpZmllZCwgZW5zdXJlIHdlIHN1ZmZpY2llbnRseSBwYWRcbiAgICBsZXQgcGFkZGVkQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBwYWRkZWRCdWZmZXIuc2V0KGJ1ZmZlciwgbGVuZ3RoIC0gYnVmZmVyLmxlbmd0aCk7XG4gICAgcmV0dXJuIHBhZGRlZEJ1ZmZlcjtcbn07XG4vLyBQdXJlIEpTIGltcGxlbWVudGF0aW9uIG9mIGJ0b2EuIFRoaXMgaXMgYWRhcHRlZCBmcm9tIHRoZSBmb2xsb3dpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vYWJhYi9ibG9iLzgwODc0YWUxZmUxY2RlMmU1ODdiYjZlNTFiNmQ3YzliNDJjYTFkMzQvbGliL2J0b2EuanNcbmZ1bmN0aW9uIGJ0b2Eocykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgIH1cbiAgICBsZXQgaTtcbiAgICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICAgIHMgPSBgJHtzfWA7XG4gICAgLy8gXCJUaGUgYnRvYSgpIG1ldGhvZCBtdXN0IHRocm93IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIgRE9NRXhjZXB0aW9uIGlmXG4gICAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZENoYXJhY3RlckVycm9yOiBmb3VuZCBjb2RlIHBvaW50IGdyZWF0ZXIgdGhhbiAyNTU6JHtzLmNoYXJDb2RlQXQoaSl9IGF0IHBvc2l0aW9uICR7aX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBncm91cHNPZlNpeCA9IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXTtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzFdIHw9IHMuY2hhckNvZGVBdChpICsgMSkgPj4gNDtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdID0gKHMuY2hhckNvZGVBdChpICsgMSkgJiAweDBmKSA8PCAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICAgICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICAgICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gYnRvYUxvb2t1cChncm91cHNPZlNpeFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgQVNDSUkgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGtleXN0ciA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGtleXN0cltpbmRleF07XG4gICAgfVxuICAgIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCwgYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nLCBoZXhTdHJpbmdUb0Jhc2U2NHVybCwgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcsIHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nLCB1aW50OEFycmF5VG9IZXhTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ })

};
;