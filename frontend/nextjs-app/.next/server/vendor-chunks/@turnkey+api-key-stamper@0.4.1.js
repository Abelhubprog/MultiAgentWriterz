"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey+api-key-stamper@0.4.1";
exports.ids = ["vendor-chunks/@turnkey+api-key-stamper@0.4.1"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   pointDecode: () => (/* reexport safe */ _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__.pointDecode),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey+api-key-stamper@0.4.1\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey+api-key-stamper@0.4.1\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@turnkey+api-key-stamper@0.4.1\"), __webpack_require__.e(\"vendor-chunks/@noble+curves@1.9.3\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ0g7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMFJBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0UkFBMEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4VkFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEVBQXVCO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFeUM7QUFDekMiLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXGluZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcbmV4cG9ydCB7IHBvaW50RGVjb2RlIH0gZnJvbSAnLi90aW5rL2VsbGlwdGljX2N1cnZlcy5tanMnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8gSGVhZGVyIG5hbWUgZm9yIGFuIEFQSSBrZXkgc3RhbXBcbmNvbnN0IHN0YW1wSGVhZGVyTmFtZSA9IFwiWC1TdGFtcFwiO1xuLy8gYHdpbmRvdy5kb2N1bWVudGAgZW5zdXJlcyB0aGF0IHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0XG4vLyBhbmQgYGNyeXB0by5zdWJ0bGVgIGVuc3VyZXMgdGhhdCBpdCBzdXBwb3J0cyB0aGUgd2ViIGNyeXB0byBBUElzXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmxleGRpbmVzaC9icm93c2VyLW9yLW5vZGUvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LnRzXG5jb25zdCBpc0NyeXB0b0VuYWJsZWRCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIGNyeXB0by5zdWJ0bGUgIT09IFwidW5kZWZpbmVkXCI7XG4vLyBXZSBjaGVjayBgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlYFxuLy8gVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmxleGRpbmVzaC9icm93c2VyLW9yLW5vZGUvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LnRzXG5jb25zdCBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHByb2Nlc3MudmVyc2lvbnMgIT0gbnVsbCAmJlxuICAgIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPSBudWxsO1xuLyoqXG4gKiBTaWduYXR1cmUgZnVuY3Rpb24gYWJzdHJhY3RpbmcgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gTm9kZUpTIGFuZCB3ZWIgZW52aXJvbm1lbnRzIGZvciBzaWduaW5nIHdpdGggQVBJIGtleXMuXG4gKi9cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgaWYgKGlzQ3J5cHRvRW5hYmxlZEJyb3dzZXIpIHtcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vd2ViY3J5cHRvLm1qcycpLnRoZW4oKG0pID0+IG0uc2lnbldpdGhBcGlLZXkpO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGUpIHtcbiAgICAgICAgY29uc3QgZm4gPSBhd2FpdCBpbXBvcnQoJy4vbm9kZWNyeXB0by5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgTm9kZUpTIG9yIHdlYiBjcnlwdG8gYXQgb3VyIGRpc3Bvc2FsLCBkZWZhdWx0IHRvIHB1cmUgSlMgaW1wbGVtZW50YXRpb25cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSBmb3Igb2xkIGJyb3dzZXJzIGFuZCByZWFjdCBuYXRpdmUgZW52aXJvbm1lbnRzXG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL3B1cmVqcy5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG59O1xuLyoqXG4gKiBTdGFtcGVyIHRvIHVzZSB3aXRoIGBAdHVybmtleS9odHRwYCdzIGBUdXJua2V5Q2xpZW50YFxuICovXG5jbGFzcyBBcGlLZXlTdGFtcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5hcGlQdWJsaWNLZXkgPSBjb25maWcuYXBpUHVibGljS2V5O1xuICAgICAgICB0aGlzLmFwaVByaXZhdGVLZXkgPSBjb25maWcuYXBpUHJpdmF0ZUtleTtcbiAgICB9XG4gICAgYXN5bmMgc3RhbXAocGF5bG9hZCkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzaWduV2l0aEFwaUtleSh7XG4gICAgICAgICAgICBwdWJsaWNLZXk6IHRoaXMuYXBpUHVibGljS2V5LFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogdGhpcy5hcGlQcml2YXRlS2V5LFxuICAgICAgICAgICAgY29udGVudDogcGF5bG9hZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICAgICAgcHVibGljS2V5OiB0aGlzLmFwaVB1YmxpY0tleSxcbiAgICAgICAgICAgIHNjaGVtZTogXCJTSUdOQVRVUkVfU0NIRU1FX1RLX0FQSV9QMjU2XCIsXG4gICAgICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyTmFtZTogc3RhbXBIZWFkZXJOYW1lLFxuICAgICAgICAgICAgc3RhbXBIZWFkZXJWYWx1ZTogc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoSlNPTi5zdHJpbmdpZnkoc3RhbXApKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFwaUtleVN0YW1wZXIsIHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvbm9kZWNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3VCOztBQUV4RDtBQUNBLFlBQVksaUNBQWlDO0FBQzdDLDZCQUE2QixvREFBdUI7QUFDcEQ7QUFDQTtBQUNBLGFBQWEscUVBQXlCO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsaUJBQWlCLDhDQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXG5vZGVjcnlwdG8ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3QgcHJpdmF0ZUtleU9iamVjdCA9IGNyeXB0by5jcmVhdGVQcml2YXRlS2V5KHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtLSB0aGUga2V5IGNhbiBiZSBhIEpXSyBvYmplY3Qgc2luY2UgTm9kZSB2MTUuMTIuMFxuICAgICAgICAvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL2NyeXB0by5odG1sI2NyeXB0b2NyZWF0ZXByaXZhdGVrZXlrZXlcbiAgICAgICAga2V5OiBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKHtcbiAgICAgICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgICAgICBjb21wcmVzc2VkUHVibGljS2V5SGV4OiBwdWJsaWNLZXksXG4gICAgICAgIH0pLFxuICAgICAgICBmb3JtYXQ6IFwiandrXCIsXG4gICAgfSk7XG4gICAgY29uc3Qgc2lnbiA9IGNyeXB0by5jcmVhdGVTaWduKFwiU0hBMjU2XCIpO1xuICAgIHNpZ24ud3JpdGUoQnVmZmVyLmZyb20oY29udGVudCkpO1xuICAgIHNpZ24uZW5kKCk7XG4gICAgcmV0dXJuIHNpZ24uc2lnbihwcml2YXRlS2V5T2JqZWN0LCBcImhleFwiKTtcbn07XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/../../node_modules/.pnpm/@noble+curves@1.9.3/node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../../node_modules/.pnpm/sha256-uint8array@0.10.7/node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvcHVyZWpzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0s7QUFDVzs7QUFFMUQ7QUFDQSxzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQSw0QkFBNEIsd0VBQXFCO0FBQ2pEO0FBQ0EsbUVBQW1FLGdCQUFnQixRQUFRLGdCQUFnQjtBQUMzRztBQUNBLGlCQUFpQiw2REFBVTtBQUMzQixzQkFBc0Isb0RBQUk7QUFDMUI7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXHB1cmVqcy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcDI1NiB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvcDI1Nic7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnc2hhMjU2LXVpbnQ4YXJyYXknO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IHAyNTYuZ2V0UHVibGljS2V5KGlucHV0LnByaXZhdGVLZXksIHRydWUpO1xuICAgIC8vIFB1YmxpYyBrZXkgaW4gdGhlIHVzdWFsIDAyIG9yIDAzICsgNjQgaGV4IGRpZ2l0c1xuICAgIGNvbnN0IHB1YmxpY0tleVN0cmluZyA9IHVpbnQ4QXJyYXlUb0hleFN0cmluZyhwdWJsaWNLZXkpO1xuICAgIGlmIChwdWJsaWNLZXlTdHJpbmcgIT0gaW5wdXQucHVibGljS2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFkIEFQSSBrZXkuIEV4cGVjdGVkIHRvIGdldCBwdWJsaWMga2V5ICR7aW5wdXQucHVibGljS2V5fSwgZ290ICR7cHVibGljS2V5U3RyaW5nfWApO1xuICAgIH1cbiAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaCgpLnVwZGF0ZShpbnB1dC5jb250ZW50KS5kaWdlc3QoKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBwMjU2LnNpZ24oaGFzaCwgaW5wdXQucHJpdmF0ZUtleSk7XG4gICAgcmV0dXJuIHNpZ25hdHVyZS50b0RFUkhleCgpO1xufTtcblxuZXhwb3J0IHsgc2lnbldpdGhBcGlLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1cmVqcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdGluay9ieXRlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIkQ6XFxNdWx0aUFnZW50V3JpdGVyelxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHR1cm5rZXkrYXBpLWtleS1zdGFtcGVyQDAuNC4xXFxub2RlX21vZHVsZXNcXEB0dXJua2V5XFxhcGkta2V5LXN0YW1wZXJcXGRpc3RcXHRpbmtcXGJ5dGVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2J5dGVzLnRzXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQ29udmVydHMgdGhlIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBoZXggdGhlIGlucHV0XG4gKiBAcmV0dXJuIHRoZSBieXRlIGFycmF5IG91dHB1dFxuICogQHRocm93cyB7IUVycm9yfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGFycltpIC8gMl0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgYXJyYXkgdG8gaGV4LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHJldHVybiBoZXggdGhlIG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0hleChieXRlcykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmVzdWx0ICs9IGhleEJ5dGUubGVuZ3RoID4gMSA/IGhleEJ5dGUgOiBcIjBcIiArIGhleEJ5dGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEJhc2U2NCBlbmNvZGUgYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHBhcmFtIG9wdF93ZWJTYWZlIFRydWUgaW5kaWNhdGVzIHdlIHNob3VsZCB1c2UgdGhlIGFsdGVybmF0aXZlXG4gKiAgICAgYWxwaGFiZXQsIHdoaWNoIGRvZXMgbm90IHJlcXVpcmUgZXNjYXBpbmcgZm9yIHVzZSBpbiBVUkxzLlxuICogQHJldHVybiBiYXNlNjQgb3V0cHV0XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0KGJ5dGVzLCBvcHRfd2ViU2FmZSkge1xuICAgIGNvbnN0IGVuY29kZWQgPSBidG9hKFxuICAgIC8qIHBhZGRpbmcgKi9cbiAgICB0b0J5dGVTdHJpbmcoYnl0ZXMpKS5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIGlmIChvcHRfd2ViU2FmZSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLiBFYWNoIGJ5dGUgaXMgY29ycmVzcG9uZGluZyB0byBhXG4gKiBjaGFyYWN0ZXIuIERvZXMgbm90IHN1cHBvcnQgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZVN0cmluZyhieXRlcykge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBmcm9tSGV4LCB0b0Jhc2U2NCwgdG9CeXRlU3RyaW5nLCB0b0hleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!***********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n * - The implementation of integerToByteArray has been modified to augment the resulting byte array to a certain length.\n * - The implementation of PointDecode has been modified to decode both compressed and uncompressed points by checking for correct format\n * - Method isP256CurvePoint added to check whether an uncompressed point is valid\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i, length) {\n    const input = i.toString(16);\n    const numHexChars = length * 2;\n    let padding = \"\";\n    if (numHexChars < input.length) {\n        throw new Error(`cannot pack integer with ${input.length} hex chars into ${length} bytes`);\n    }\n    else {\n        padding = \"0\".repeat(numHexChars - input.length);\n    }\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(padding + input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n *\n * Given x and y coordinates of a JWK, checks whether these are valid points on\n * the P-256 elliptic curve.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param y y-coordinate\n * @return boolean validity\n */\nfunction isP256CurvePoint(x, y) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    const lhs = y ** BigInt(2) % p;\n    return lhs === rhs;\n}\n/**\n * Decodes a public key in _compressed_ OR _uncompressed_ format.\n * Augmented to ensure that the x and y components are padded to fit 32 bytes.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    const compressedLength = fieldSize + 1;\n    const uncompressedLength = 2 * fieldSize + 1;\n    if (point.length !== compressedLength &&\n        point.length !== uncompressedLength) {\n        throw new Error(\"Invalid length: point is not in compressed or uncompressed format\");\n    }\n    // Decodes point if its length and first bit match the compressed format\n    if ((point[0] === 2 || point[0] === 3) && point.length == compressedLength) {\n        const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n        const x = byteArrayToInteger(point.subarray(1, point.length));\n        const p = getModulus();\n        if (x < BigInt(0) || x >= p) {\n            throw new Error(\"x is out of range\");\n        }\n        const y = getY(x, lsb);\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n        // Decodes point if its length and first bit match the uncompressed format\n    }\n    else if (point[0] === 4 && point.length == uncompressedLength) {\n        const x = byteArrayToInteger(point.subarray(1, fieldSize + 1));\n        const y = byteArrayToInteger(point.subarray(fieldSize + 1, 2 * fieldSize + 1));\n        const p = getModulus();\n        if (x < BigInt(0) ||\n            x >= p ||\n            y < BigInt(0) ||\n            y >= p ||\n            !isP256CurvePoint(x, y)) {\n            throw new Error(\"invalid uncompressed x and y coordinates\");\n        }\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n    }\n    throw new Error(\"invalid format\");\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));\n    // Ensure that d is sufficiently padded\n    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);\n    return jwk;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUN5RDs7QUFFbEg7QUFDQSxZQUFZLG9EQUFvRDtBQUNoRSxnQkFBZ0Isc0VBQVcsQ0FBQywwRUFBdUI7QUFDbkQ7QUFDQSxZQUFZLHVFQUFvQiw0QkFBNEIsNkVBQThCO0FBQzFGO0FBQ0E7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyJEOlxcTXVsdGlBZ2VudFdyaXRlcnpcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEB0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMVxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcYXBpLWtleS1zdGFtcGVyXFxkaXN0XFx1dGlscy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcG9pbnREZWNvZGUgfSBmcm9tICcuL3RpbmsvZWxsaXB0aWNfY3VydmVzLm1qcyc7XG5pbXBvcnQgeyB1aW50OEFycmF5RnJvbUhleFN0cmluZywgaGV4U3RyaW5nVG9CYXNlNjR1cmwsIERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuZnVuY3Rpb24gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayhpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gcG9pbnREZWNvZGUodWludDhBcnJheUZyb21IZXhTdHJpbmcoY29tcHJlc3NlZFB1YmxpY0tleUhleCkpO1xuICAgIC8vIEVuc3VyZSB0aGF0IGQgaXMgc3VmZmljaWVudGx5IHBhZGRlZFxuICAgIGp3ay5kID0gaGV4U3RyaW5nVG9CYXNlNjR1cmwodW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgREVGQVVMVF9KV0tfTUVNQkVSX0JZVEVfTEVOR1RIKTtcbiAgICByZXR1cm4gandrO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../../node_modules/.pnpm/@turnkey+encoding@0.2.1/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDRTs7QUFFMUQ7QUFDQTtBQUNBLFlBQVksaUNBQWlDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHFFQUF5QjtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLHdFQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJEOlxcTXVsdGlBZ2VudFdyaXRlcnpcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEB0dXJua2V5K2FwaS1rZXktc3RhbXBlckAwLjQuMVxcbm9kZV9tb2R1bGVzXFxAdHVybmtleVxcYXBpLWtleS1zdGFtcGVyXFxkaXN0XFx3ZWJjcnlwdG8ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5pbXBvcnQgeyB1aW50OEFycmF5VG9IZXhTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGVudCwgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBpbnB1dDtcbiAgICBjb25zdCBrZXkgPSBhd2FpdCBpbXBvcnRUdXJua2V5QXBpS2V5KHtcbiAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleSxcbiAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleDogcHVibGljS2V5LFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBzaWduTWVzc2FnZSh7IGtleSwgY29udGVudCB9KTtcbn07XG5hc3luYyBmdW5jdGlvbiBpbXBvcnRUdXJua2V5QXBpS2V5KGlucHV0KSB7XG4gICAgY29uc3QgeyB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4LCBjb21wcmVzc2VkUHVibGljS2V5SGV4IH0gPSBpbnB1dDtcbiAgICBjb25zdCBqd2sgPSBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrKHtcbiAgICAgICAgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCxcbiAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleCxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXCJqd2tcIiwgandrLCB7XG4gICAgICAgIG5hbWU6IFwiRUNEU0FcIixcbiAgICAgICAgbmFtZWRDdXJ2ZTogXCJQLTI1NlwiLFxuICAgIH0sIGZhbHNlLCAvLyBub3QgZXh0cmFjdGFibGVcbiAgICBbXCJzaWduXCJdIC8vIGFsbG93IHNpZ25pbmdcbiAgICApO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnbk1lc3NhZ2UoaW5wdXQpIHtcbiAgICBjb25zdCB7IGtleSwgY29udGVudCB9ID0gaW5wdXQ7XG4gICAgY29uc3Qgc2lnbmF0dXJlSWVlZTEzNjMgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oe1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIGhhc2g6IFwiU0hBLTI1NlwiLFxuICAgIH0sIGtleSwgbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNvbnRlbnQpKTtcbiAgICBjb25zdCBzaWduYXR1cmVEZXIgPSBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZUllZWUxMzYzKSk7XG4gICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0hleFN0cmluZyhzaWduYXR1cmVEZXIpO1xufVxuLyoqXG4gKiBgU3VidGxlQ3J5cHRvLnNpZ24oLi4uKWAgb3V0cHV0cyBzaWduYXR1cmUgaW4gSUVFRSBQMTM2MyBmb3JtYXQ6XG4gKiAtIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdWJ0bGVDcnlwdG8vc2lnbiNlY2RzYVxuICpcbiAqIFR1cm5rZXkgZXhwZWN0cyB0aGUgc2lnbmF0dXJlIGVuY29kaW5nIHRvIGJlIERFUi1lbmNvZGVkIEFTTi4xOlxuICogLSBodHRwczovL2dpdGh1Yi5jb20vdGtocS90a2NsaS9ibG9iLzdmMDE1OWFmNWE3MzM4N2ZmMDUwNjQ3MTgwZDFkYjRkM2EzYWEwMzMvc3JjL2ludGVybmFsL2FwaWtleS9hcGlrZXkuZ28jTDE0OVxuICpcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMTE0XG4gKlxuICogVHJhbnNmb3JtIGFuIEVDRFNBIHNpZ25hdHVyZSBpbiBJRUVFIDEzNjMgZW5jb2RpbmcgdG8gREVSIGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSBpZWVlIHRoZSBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSBlbmNvZGluZ1xuICogQHJldHVybiBFQ0RTQSBzaWduYXR1cmUgaW4gREVSIGVuY29kaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRFY2RzYUllZWUxMzYzVG9EZXIoaWVlZSkge1xuICAgIGlmIChpZWVlLmxlbmd0aCAlIDIgIT0gMCB8fCBpZWVlLmxlbmd0aCA9PSAwIHx8IGllZWUubGVuZ3RoID4gMTMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSUVFRSBQMTM2MyBzaWduYXR1cmUgZW5jb2RpbmcuIExlbmd0aDogXCIgKyBpZWVlLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoMCwgaWVlZS5sZW5ndGggLyAyKSk7XG4gICAgY29uc3QgcyA9IHRvVW5zaWduZWRCaWdOdW0oaWVlZS5zdWJhcnJheShpZWVlLmxlbmd0aCAvIDIsIGllZWUubGVuZ3RoKSk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgY29uc3QgbGVuZ3RoID0gMSArIDEgKyByLmxlbmd0aCArIDEgKyAxICsgcy5sZW5ndGg7XG4gICAgbGV0IGRlcjtcbiAgICBpZiAobGVuZ3RoID49IDEyOCkge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAzKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gMTI4ICsgMTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IGxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDIpO1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gNDg7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGRlcltvZmZzZXQrK10gPSAyO1xuICAgIGRlcltvZmZzZXQrK10gPSByLmxlbmd0aDtcbiAgICBkZXIuc2V0KHIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHIubGVuZ3RoO1xuICAgIGRlcltvZmZzZXQrK10gPSAyO1xuICAgIGRlcltvZmZzZXQrK10gPSBzLmxlbmd0aDtcbiAgICBkZXIuc2V0KHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGRlcjtcbn1cbi8qKlxuICogQ29kZSBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvdGluay9ibG9iLzZmNzRiOTlhMmJmZTY2NzdlMzY3MDc5OTExNmE1NzI2OGZkMDY3ZmEvamF2YXNjcmlwdC9zdWJ0bGUvZWxsaXB0aWNfY3VydmVzLnRzI0wzMTFcbiAqXG4gKiBUcmFuc2Zvcm0gYSBiaWcgaW50ZWdlciBpbiBiaWcgZW5kaWFuIHRvIG1pbmltYWwgdW5zaWduZWQgZm9ybSB3aGljaCBoYXNcbiAqIG5vIGV4dHJhIHplcm8gYXQgdGhlIGJlZ2lubmluZyBleGNlcHQgd2hlbiB0aGUgaGlnaGVzdCBiaXQgaXMgc2V0LlxuICovXG5mdW5jdGlvbiB0b1Vuc2lnbmVkQmlnTnVtKGJ5dGVzKSB7XG4gICAgLy8gUmVtb3ZlIHplcm8gcHJlZml4ZXMuXG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICB3aGlsZSAoc3RhcnQgPCBieXRlcy5sZW5ndGggJiYgYnl0ZXNbc3RhcnRdID09IDApIHtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKHN0YXJ0ID09IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICBzdGFydCA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGxldCBleHRyYVplcm8gPSAwO1xuICAgIC8vIElmIHRoZSAxc3QgYml0IGlzIG5vdCB6ZXJvLCBhZGQgMSB6ZXJvIGJ5dGUuXG4gICAgaWYgKChieXRlc1tzdGFydF0gJiAxMjgpID09IDEyOCkge1xuICAgICAgICAvLyBBZGQgZXh0cmEgemVyby5cbiAgICAgICAgZXh0cmFaZXJvID0gMTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMubGVuZ3RoIC0gc3RhcnQgKyBleHRyYVplcm8pO1xuICAgIHJlcy5zZXQoYnl0ZXMuc3ViYXJyYXkoc3RhcnQpLCBleHRyYVplcm8pO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJjcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@turnkey+api-key-stamper@0.4.1/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ })

};
;